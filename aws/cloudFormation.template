{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS Calori App",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Elixir Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AMI": {
      "Default": "ami-0e765cee959bcbfce",
      "Description": "Ubuntu Server 20.04 LTS amd64 x86 hvm:ebs-ssd AMI",
      "Type": "String"
    },

    "EBSVolumeSize": {
        "Description": "The size of the EBS volume",
        "Type": "String",
        "Default": "8"
    },

    "CaloriAppS3Bucket": {
      "Description": "S3 bucket name",
      "Type": "String",
      "Default": "calori-app-website"
    },

    "S3UserName": {
      "Description": "S3 user name to handle the bucket",
      "Type": "String",
      "Default": "calori_app_user"
    },

    "ElixirAppName": {
      "Description": "Elixir app name",
      "Type": "String",
      "Default": "calori_app"
    },

    "DatabaseUser": {
      "Description": "Database user name",
      "Type": "String",
      "Default": "postgres"
    },

    "DatabasePass": {
      "Description": "Database password",
      "Type": "String",
      "Default": "postgres"
    },

    "PhoenixPort": {
      "Description": "Phoenix webpage PORT",
      "Type": "String",
      "Default": "4000"
    },

    "OtpVersion": {
      "Description": "Define the Erlang OTP version to be installed",
      "Type": "String",
      "Default": "20.3"
    }

  },

  "Resources" : {

    "CaloriAppServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "make"              : [],
                "nginx"             : [],
                "m4"                : [],
                "libncurses5-dev"   : [],
                "libncursesw5-dev"  : [],
                "openjdk-8-jre"     : [],
                "flex"              : [],
                "fop"               : [],
                "nodejs"            : [],
                "inotify-tools"     : [],
                "npm"               : [],
                "postgresql-12"     : [],
                "awscli"            : []
              }
            },
            "files" : {
              "/home/ubuntu/install.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                                        \n",
                  "                                                                                   \n",
                  "ELIXIR_APP_PATH=/home/ubuntu/deploy/                                               \n",
                  "ERLANG_PACKAGES=https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb \n",
                  "ERLANG_VERSION=", { "Ref": "OtpVersion" }, "                                       \n",
                  "                                                                                   \n",
                  "echo \"======== Modifying nginx configuration file \"                              \n",
                  "sudo sed -i '0,/try_files $uri $uri\\/ =404;/s//proxy_set_header   X-Forwarded-For $remote_addr; \\n                proxy_set_header   Host $http_host;\\n                proxy_pass         \\\"http:\\/\\/127.0.0.1:", { "Ref": "PhoenixPort" }, "\\\";/' /etc/nginx/sites-enabled/default \n",
                  "                                                                                   \n",
                  "echo \"======== Installing Erlang/ELixir \"                                        \n",
                  "wget ${ERLANG_PACKAGES}                                                            \n",
                  "sudo dpkg -i erlang-solutions_2.0_all.deb                                          \n",
                  "sudo apt-get update                                                                \n",
                  "sudo apt-get install esl-erlang=1:${ERLANG_VERSION}.* -y                           \n",
                  "sudo apt-get install -y elixir                                                     \n",
                  "                                                                                   \n",
                  "echo \"======== Creating Postgressql user/pass  \"                                 \n",
                  "sudo su postgres <<EOF\n",
                  "psql -c \"CREATE USER ", { "Ref": "DatabaseUser" }, ";\"\n",
                  "EOF\n",
                  "sudo su postgres <<EOF\n",
                  "psql -c \"ALTER USER ", { "Ref": "DatabaseUser" }, " PASSWORD '", { "Ref": "DatabasePass" }, "'; ALTER USER ", { "Ref": "DatabaseUser" }, " WITH SUPERUSER;\"\n",
                  "EOF\n",
                  "                                                                                   \n",
                  "echo \"======== Configuring to Start automatically \"                              \n",
                  "sudo systemctl enable run-app                                                      \n",
                  "echo \"======== Reboot after installation \"                                       \n",
                  "                                                                                   \n",
                  "sleep 5 && sudo reboot &                                                           \n",
                  "exit 0                                                                             \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ubuntu/deploy/upgrade.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                            \n",
                  "UPGRADE_PATH=",{ "Ref": "CaloriAppS3Bucket" }, "/upgrades/             \n",
                  "ELIXIR_APP_NAME=", { "Ref": "ElixirAppName" }, "                       \n",
                  "                                                                       \n",
                  "while :                                                                \n",
                  "do                                                                     \n",
                  "  # Sync upgrades folder with the current application                  \n",
                  "  aws s3 sync s3://${UPGRADE_PATH} releases/                           \n",
                  "                                                                       \n",
                  "  # Capture current app version                                        \n",
                  "  CURRENT_VERSION=`sudo bin/${ELIXIR_APP_NAME} describe | grep Version | sed 's/[Version: \",|[:space:]]//g'` \n",
                  "  # Capture the newest upgrade version                                 \n",
                  "  UPGRADE_VERSION=$(find ${EC2_TMP} -type d -name '[0-9]*.[0-9]*.[0-9]*' -printf \"%f\\n\" | sort -V | tail -n 1)\n",
                  "  if [[ ${CURRENT_VERSION} != ${UPGRADE_VERSION} ]]                    \n",
                  "  then                                                                 \n",
                  "    echo \"New upgrade detect, updating from ${CURRENT_VERSION} to ${UPGRADE_VERSION} \" \n",
                  "    echo \"Migrating the Database ...\"                                \n",
                  "    bin/${ELIXIR_APP_NAME} eval \"CaloriApp.Release.migrate\"          \n",
                  "    echo \"Upgrading the application [HOT UPGRADE] ...\"               \n",
                  "    bin/${ELIXIR_APP_NAME} upgrade ${UPGRADE_VERSION}                  \n",
                  "  fi                                                                   \n",
                  "                                                                       \n",
                  "  sleep 30                                                             \n",
                  "done                                                                   \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ubuntu/deploy/deploy.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                            \n",
                  "RELEASE_PATH=",{ "Ref": "CaloriAppS3Bucket" }, "/releases/             \n",
                  "EC2_TMP=/tmp/releases                                                  \n",
                  "rx='^([0-9]+\\.){0,2}(\\*|[0-9]+)$'                                    \n",
                  "ELIXIR_APP_NAME=", { "Ref": "ElixirAppName" }, "                       \n",
                  "                                                                       \n",
                  "while :                                                                \n",
                  "do                                                                     \n",
                  "  # Sync releases folder with /tmp/                                    \n",
                  "  aws s3 sync s3://${RELEASE_PATH} ${EC2_TMP}                          \n",
                  "                                                                       \n",
                  "  # Capture the newest version                                         \n",
                  "  DEPLOY_VERSION=$(find ${EC2_TMP} -type d -name '[0-9]*.[0-9]*.[0-9]*' -printf \"%f\\n\" | sort -V | tail -n 1)\n",
                  "  if [[ $DEPLOY_VERSION =~ $rx ]]; then                                \n",
                  "    echo \"Installing ${VERSION}\"                                     \n",
                  "    cp ${EC2_TMP}/${DEPLOY_VERSION}/${ELIXIR_APP_NAME}.tar.gz .        \n",
                  "    tar xvf ${ELIXIR_APP_NAME}.tar.gz                                  \n",
                  "    echo \"Creating and migrating the Database ...\"                   \n",
                  "    bin/${ELIXIR_APP_NAME} eval \"CaloriApp.Release.create_and_migrate\"\n",
                  "    echo \"Application ${ELIXIR_APP_NAME} installed with success, rebooting ...\"\n",
                  "    sync && reboot &                                                   \n",
                  "  else                                                                 \n",
                  "    echo \"No releases available yet\"                                 \n",
                  "  fi                                                                   \n",
                  "  sleep 30                                                             \n",
                  "done                                                                   \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/init.d/run-app" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                               \n",
                  "### BEGIN INIT INFO                                       \n",
                  "# Provides:          run-app                              \n",
                  "# Required-Start:    $all                                 \n",
                  "# Required-Stop:                                          \n",
                  "# Default-Start:     2 3 4 5                              \n",
                  "# Default-Stop:                                           \n",
                  "# Short-Description: Starts/Stops Elixir application      \n",
                  "### END INIT INFO                                         \n",
                  "                                                          \n",
                  "export HOME=/home/ubuntu                                  \n",
                  "export LANG=\"en_US.utf8\"                                \n",
                  "export LANGUAGE=\"en_US:\"                                \n",
                  "export LC_ALL=en_US.UTF-8                                 \n",
                  "export TERM=screen                                        \n",
                  "                                                          \n",
                  "ELIXIR_APP_PATH=/home/ubuntu/deploy/                      \n",
                  "ELIXIR_APP_NAME=", { "Ref": "ElixirAppName" }, "          \n",
                  "                                                          \n",
                  "start() {                                                 \n",
                  "    cd ${ELIXIR_APP_PATH}                                 \n",
                  "    if [ -f \"bin/${ELIXIR_APP_NAME}\" ]; then            \n",
                  "      echo \"starting ${ELIXIR_APP_NAME}\"                \n",
                  "      bin/${ELIXIR_APP_NAME} start                        \n",
                  "      echo \"Starting daemon to upgrade automatically\"   \n",
                  "      ./upgrade.sh </dev/null &>/dev/null &               \n",
                  "    else                                                  \n",
                  "      echo \"Starting daemon to deploy automatically\"    \n",
                  "      ./deploy.sh </dev/null &>/dev/null &                \n",
                  "    fi                                                    \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "stop() {                                                  \n",
                  "    # stop erlang application                             \n",
                  "    cd ${ELIXIR_APP_PATH}                                 \n",
                  "    if [ -f \"bin/${ELIXIR_APP_NAME}\" ]; then            \n",
                  "      bin/${ELIXIR_APP_NAME} stop                         \n",
                  "    else                                                  \n",
                  "      echo \"${ELIXIR_APP_NAME} not installed\"           \n",
                  "    fi                                                    \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "status() {                                                \n",
                  "    cd ${ELIXIR_APP_PATH}                                 \n",
                  "    bin/${ELIXIR_APP_NAME} status                         \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "case \"$1\" in                                            \n",
                  "    start)                                                \n",
                  "       start                                              \n",
                  "       ;;                                                 \n",
                  "    stop)                                                 \n",
                  "       stop                                               \n",
                  "       ;;                                                 \n",
                  "    restart)                                              \n",
                  "       ;;                                                 \n",
                  "    *)                                                    \n",
                  "       echo \"Usage: $0 {start|stop|status|restart}\"     \n",
                  "esac                                                      \n",
                  "                                                          \n",
                  "exit 0                                                    \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "install_erlang" : {
                "command" : "/home/ubuntu/install.sh > /home/ubuntu/install_log.txt"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {"VolumeSize" : {"Ref" : "EBSVolumeSize"}}
        }],
        "ImageId"        : { "Ref" : "AMI" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "ErlangServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile": { "Ref": "Ec2InstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",
           "sudo apt-get update                                             \n",
           "sudo apt-get install -y python-setuptools                       \n",
           "sudo mkdir -p /opt/aws/bin                                      \n",
           "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz  \n",
           "sudo python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz \n",
           "/opt/aws/bin/cfn-init -v --resource CaloriAppServerInstance",
           " --stack ",
           {
             "Ref": "AWS::StackName"
           },
           " --region ",
           {
             "Ref": "AWS::Region"
           },
           "\n",
           "/opt/aws/bin/cfn-signal -e $? –resource CaloriAppServerInstance",
           " --stack ",
           {
             "Ref": "AWS::StackName"
           },
           " --region ",
           {
             "Ref": "AWS::Region"
           },
           "                                                                 \n"
        ]]}}
      },
      "DependsOn": [ "CaloriAppPolicy" ]
    },

    "ErlangServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP via port 80 and ssh by 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80",   "ToPort" : "80",   "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22",   "ToPort" : "22",   "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": { "Ref": "CaloriAppS3Bucket" }
      }
    },
  
    "CaloriAppGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "CaloriAppGroup"
      }
    },
  
    "CaloriAppUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
          "UserName": { "Ref": "S3UserName" },
          "Groups": [
            {
              "Ref": "CaloriAppGroup"
            }
          ]
      }
    },
    
    "FullS3AccessFromS2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
         "AssumeRolePolicyDocument": {
            "Statement": [{
               "Effect": "Allow",
               "Principal": {
                  "Service": ["ec2.amazonaws.com"]
               },
               "Action": ["sts:AssumeRole"]
            }]
         },
         "Path": "/"
      }
    },

    "Ec2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "FullS3AccessFromS2Role" }]
      },
      "DependsOn": [ "FullS3AccessFromS2Role" ]
    },
  
    "CaloriAppPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CaloriAppPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:ListBucket" ],
              "Resource": [ 
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "CaloriAppS3Bucket" } ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": [ 
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "CaloriAppS3Bucket" }, "/*" ] ] }
              ]
            }
          ]
        },
        "Roles": [{ "Ref": "FullS3AccessFromS2Role" }],
        "Groups": [
          {
            "Ref": "CaloriAppGroup"
          }
        ]
      },
      "DependsOn": [ "CaloriAppUser", "FullS3AccessFromS2Role" ]
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Description" : "URL for newly created Elixir Server stack",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "CaloriAppServerInstance", "PublicDnsName" ]}]] }
    }
  }
}

