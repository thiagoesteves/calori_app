{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS Calori Website App",

  "Parameters" : {

    "P01OperatorEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String",
      "Default": "calori@gmail.com"
    },

    "P02KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "P03ShouldCreateS3DatabaseInputParameter": {
      "Type": "String",
      "Default" : "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "If true then the S3 bucket and Database will be created with the CloudFormation stack."
    },

    "P04UpgradeRequestTime": {
      "Description": "Time between requests for deploy and upgrade in seconds",
      "Type": "Number",
      "Default": "30"
    },

    "P05PhoenixPort": {
      "Description": "Phoenix webpage PORT",
      "Type": "String",
      "Default": "4000"
    },

    "P06InstanceType" : {
      "Description" : "Elixir Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "P07SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "P08AMI": {
      "Default": "ami-0e765cee959bcbfce",
      "Description": "Ubuntu Server 20.04 LTS amd64 x86 hvm:ebs-ssd AMI",
      "Type": "String"
    },

    "P09EBSVolumeSize": {
        "Description": "The size of the EBS volume",
        "Type": "String",
        "Default": "8"
    },

    "P10S3UserName": {
      "Description": "S3 user name to handle the bucket",
      "Type": "String",
      "Default": "calori_app_user"
    },

    "P11ElixirAppName": {
      "Description": "Elixir app name",
      "Type": "String",
      "Default": "calori_app"
    },

    "P12CaloriAppS3Bucket": {
      "Description": "S3 bucket name [Attention: Use the same name if resource already exists from previous create-stack]",
      "Type": "String",
      "Default": "calori-app-website"
    },

    "P13DatabaseName": {
      "Default": "caloriappdb",
      "Description" : "The database name [Attention: Ignored if resource already exists from previous create-stack]",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "P14DatabaseUser": {
      "Default": "postgres",
      "NoEcho": "true",
      "Description" : "The database admin account username [Attention: Ignored if resource already exists from previous create-stack]",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "P15DatabasePass": {
      "Default": "postgres",
      "NoEcho": "true",
      "Description" : "The database admin account password [Attention: Ignored if resource already exists from previous create-stack]",
      "Type": "String",
      "MinLength": "8"
    },

    "P16DatabaseClass" : {
      "Default" : "db.t2.micro",
      "Description" : "Database instance class [Attention: Ignored if resource already exists from previous create-stack]",
      "Type" : "String",
      "AllowedValues" : [ "db.t2.micro", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "P17DatabaseAllocatedStorage" : {
      "Default": "20",
      "Description" : "The size of the database (Gb) [Attention: Ignored if resource already exists from previous create-stack]",
      "Type": "Number",
      "MinValue": "20",
      "MaxValue": "13384",
      "ConstraintDescription" : "must be above 20+"
    }
  },

  "Conditions": {
    "CreateS3Database": {
      "Fn::Equals": [ { "Ref": "P03ShouldCreateS3DatabaseInputParameter" }, "true" ]
    }
  },

  "Resources" : {

    "CaloriAppServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "nginx"             : [],
                "postgresql-12"     : [],
                "awscli"            : []
              }
            },
            "files" : {
              "/home/ubuntu/config.json": {
                "content": { "Fn::Join": [ "", [
                  "{ \"agent\": { \"run_as_user\": \"root\" },                            \n",
                  "  \"logs\": { \"logs_collected\": { \"files\": { \"collect_list\": [ { \n",
                  "    \"file_path\": \"/var/log/calori_app/messages\",                   \n",
                  "    \"log_group_name\": \"", {"Ref": "CaloriAppWebServerLogGroup"},"\",\n",
                  "    \"log_stream_name\": \"{instance_id}/messages\"                    \n",
                  "}]}}}}                                                                 \n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/home/ubuntu/install.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                                        \n",
                  "                                                                                   \n",
                  "DEPLOY_PATH=/home/deploy                                                           \n",
                  "DEPLOY_APP=${DEPLOY_PATH}/app                                                      \n",
                  "DEPLOY_SCRIPTS=${DEPLOY_PATH}/scripts                                              \n",
                  "LOG_PATH=/var/log/",{ "Ref": "P11ElixirAppName" }, "                               \n",
                  "LOG_FILE=messages                                                                  \n",
                  "echo \"======== Modifying nginx configuration file \"                              \n",
                  "sed -i '0,/try_files $uri $uri\\/ =404;/s//proxy_set_header   X-Forwarded-For $remote_addr; \\n                proxy_set_header   Host $http_host;\\n                proxy_pass         \\\"http:\\/\\/127.0.0.1:", { "Ref": "P05PhoenixPort" }, "\\\";/' /etc/nginx/sites-enabled/default \n",
                  "                                                                                   \n",
                  "echo \"======== Create a deploy user and its folders and files \"                  \n",
                  "adduser deploy --disabled-password --gecos \"deploy user - limited access\"        \n",
                  "mkdir ${DEPLOY_APP} && mkdir ${DEPLOY_SCRIPTS} && mkdir ${LOG_PATH}                \n",
                  "touch ${LOG_PATH}/${LOG_FILE}                                                      \n",
                  "cp /home/ubuntu/upgrade.sh /home/ubuntu/deploy.sh ${DEPLOY_SCRIPTS}                \n",
                  "chown -R deploy:deploy  ${DEPLOY_PATH}/*                                           \n",
                  "chown -R deploy:deploy  ${LOG_PATH}/*                                              \n",
                  "                                                                                   \n",
                  "echo \"======== Install Cloud Watch Agent \"                                       \n",
                  "wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb \n",
                  "dpkg -i -E ./amazon-cloudwatch-agent.deb                                           \n",
                  "                                                                                   \n",
                  "echo \"======== Configuring to Start automatically \"                              \n",
                  "systemctl enable run-app                                                           \n",
                  "echo \"======== Reboot after installation \"                                       \n",
                  "                                                                                   \n",
                  "sleep 5 && reboot &                                                                \n",
                  "exit 0                                                                             \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ubuntu/upgrade.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                            \n",
                  "UPGRADE_PATH=",{ "Ref": "P12CaloriAppS3Bucket" }, "/upgrades/          \n",
                  "ELIXIR_APP_NAME=", { "Ref": "P11ElixirAppName" }, "                    \n",
                  "SCRIPT_NAME=[UPGRADE]                                                  \n",
                  "                                                                       \n",
                  "while :                                                                \n",
                  "do                                                                     \n",
                  "  # Sync upgrades folder with the current application                  \n",
                  "  aws s3 sync s3://${UPGRADE_PATH} releases/ --quiet                   \n",
                  "                                                                       \n",
                  "  # Capture current app version                                        \n",
                  "  CURRENT_VERSION=`bin/${ELIXIR_APP_NAME} describe | grep Version | sed 's/[Version: \",|[:space:]]//g'` \n",
                  "  # Capture the newest upgrade version                                 \n",
                  "  UPGRADE_VERSION=$(find ${EC2_TMP} -type d -name '[0-9]*.[0-9]*.[0-9]*' -printf \"%f\\n\" | sort -V | tail -n 1)\n",
                  "  if [[ ${CURRENT_VERSION} != ${UPGRADE_VERSION} ]]                    \n",
                  "  then                                                                 \n",
                  "    echo \"${SCRIPT_NAME} New upgrade detect, updating from ${CURRENT_VERSION} to ${UPGRADE_VERSION} \" \n",
                  "    echo \"${SCRIPT_NAME} Migrating the Database ...\"                 \n",
                  "    bin/${ELIXIR_APP_NAME} eval \"CaloriApp.Release.migrate\"          \n",
                  "    echo \"${SCRIPT_NAME} Upgrading the application [HOT UPGRADE] ...\" \n",
                  "    bin/${ELIXIR_APP_NAME} upgrade ${UPGRADE_VERSION}                  \n",
                  "  fi                                                                   \n",
                  "                                                                       \n",
                  "  sleep ", { "Ref": "P04UpgradeRequestTime" }, "                       \n",
                  "done                                                                   \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ubuntu/deploy.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                                            \n",
                  "RELEASE_PATH=",{ "Ref": "P12CaloriAppS3Bucket" }, "/releases/          \n",
                  "EC2_TMP=/tmp/releases                                                  \n",
                  "rx='^([0-9]+\\.){0,2}(\\*|[0-9]+)$'                                    \n",
                  "APP_NAME=", { "Ref": "P11ElixirAppName" }, "                           \n",
                  "SCRIPTS_PATH=/home/deploy/scripts                                      \n",
                  "LOG_FILE=/var/log/${APP_NAME}/messages                                 \n",
                  "SCRIPT_NAME=[DEPLOY]                                                   \n",
                  "                                                                       \n",
                  "while :                                                                \n",
                  "do                                                                     \n",
                  "  # Sync releases folder with /tmp/                                    \n",
                  "  aws s3 sync s3://${RELEASE_PATH} ${EC2_TMP} --quiet                  \n",
                  "                                                                       \n",
                  "  # Capture the newest version                                         \n",
                  "  DEPLOY_VERSION=$(find ${EC2_TMP} -type d -name '[0-9]*.[0-9]*.[0-9]*' -printf \"%f\\n\" | sort -V | tail -n 1)\n",
                  "  if [[ $DEPLOY_VERSION =~ $rx ]]                                      \n",
                  "  then                                                                 \n",
                  "    echo \"${SCRIPT_NAME} Installing ${VERSION}\"                      \n",
                  "    cp ${EC2_TMP}/${DEPLOY_VERSION}/${APP_NAME}.tar.gz .               \n",
                  "    tar xf ${APP_NAME}.tar.gz                                          \n",
                  "    echo \"${SCRIPT_NAME} Creating and migrating the Database ...\"    \n",
                  "    bin/${APP_NAME} eval \"CaloriApp.Release.create_and_migrate\"      \n",
                  "    echo \"${SCRIPT_NAME} starting ${APP_NAME}\"                       \n",
                  "    bin/${APP_NAME} start                                              \n",
                  "    echo \"${SCRIPT_NAME} Starting daemon to upgrade automatically\"   \n",
                  "    nohup ${SCRIPTS_PATH}/upgrade.sh > ${LOG_FILE} 2>&1 &              \n",
                  "    exit 0                                                             \n",
                  "  fi                                                                   \n",
                  "  sleep ", { "Ref": "P04UpgradeRequestTime" }, "                       \n",
                  "done                                                                   \n"   
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/init.d/run-app" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash                                               \n",
                  "### BEGIN INIT INFO                                       \n",
                  "# Provides:          run-app                              \n",
                  "# Required-Start:    $all                                 \n",
                  "# Required-Stop:                                          \n",
                  "# Default-Start:     2 3 4 5                              \n",
                  "# Default-Stop:                                           \n",
                  "# Short-Description: Starts/Stops Elixir application      \n",
                  "### END INIT INFO                                         \n",
                  "                                                          \n",
                  "export HOME=/home/deploy                                  \n",
                  "export LANG=\"en_US.utf8\"                                \n",
                  "export LANGUAGE=\"en_US:\"                                \n",
                  "export LC_ALL=en_US.UTF-8                                 \n",
                  "export TERM=screen                                        \n",
                  "                                                          \n",
                  "APP_PATH=/home/deploy/app                                 \n",
                  "SCRIPTS_PATH=/home/deploy/scripts                         \n",
                  "APP_NAME=", { "Ref": "P11ElixirAppName" }, "              \n",
                  "LOG_FILE=/var/log/${APP_NAME}/messages                    \n",
                  "                                                          \n",
                  "start() {                                                 \n",
                  "    cd ${APP_PATH}                                        \n",
                  "    sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/home/ubuntu/config.json -s \n",
                  "    if [ -f \"bin/${APP_NAME}\" ]; then                   \n",
                  "      echo \"starting ${APP_NAME}\"                       \n",
                  "      sudo -u deploy bin/${APP_NAME} start                \n",
                  "      echo \"Starting daemon to upgrade automatically\"   \n",
                  "      sudo -u deploy nohup ${SCRIPTS_PATH}/upgrade.sh > ${LOG_FILE} 2>&1 & \n",
                  "    else                                                  \n",
                  "      echo \"Starting daemon to deploy automatically\"    \n",
                  "      sudo -u deploy nohup ${SCRIPTS_PATH}/deploy.sh > ${LOG_FILE} 2>&1 & \n",
                  "    fi                                                    \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "stop() {                                                  \n",
                  "    # stop erlang application                             \n",
                  "    cd ${APP_PATH}                                        \n",
                  "    if [ -f \"bin/${APP_NAME}\" ]; then                   \n",
                  "      sudo -u deploy bin/${APP_NAME} stop                 \n",
                  "    else                                                  \n",
                  "      echo \"${APP_NAME} not installed\"                  \n",
                  "    fi                                                    \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "status() {                                                \n",
                  "    cd ${APP_PATH}                                        \n",
                  "    sudo -u deploy bin/${APP_NAME} describe               \n",
                  "}                                                         \n",
                  "                                                          \n",
                  "case \"$1\" in                                            \n",
                  "    start)                                                \n",
                  "       start                                              \n",
                  "       ;;                                                 \n",
                  "    stop)                                                 \n",
                  "       stop                                               \n",
                  "       ;;                                                 \n",
                  "    status)                                               \n",
                  "       status                                             \n",
                  "       ;;                                                 \n",
                  "    *)                                                    \n",
                  "       echo \"Usage: $0 {start|stop|status}\"             \n",
                  "esac                                                      \n",
                  "                                                          \n",
                  "exit 0                                                    \n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "install_erlang" : {
                "command" : "sudo /home/ubuntu/install.sh > /home/ubuntu/install_log.txt"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {"VolumeSize" : {"Ref" : "P09EBSVolumeSize"}}
        }],
        "ImageId"        : { "Ref" : "P08AMI" },
        "InstanceType"   : { "Ref" : "P06InstanceType" },
        "SecurityGroups" : [ "CaloriAppWebServerSecurityGroup" ],
        "KeyName"        : { "Ref" : "P02KeyName" },
        "IamInstanceProfile": { "Ref": "CaloriAppEc2InstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe                                                                            \n",
           "sudo apt-get update                                                                        \n",
           "sudo apt-get install -y python-setuptools                                                  \n",
           "sudo mkdir -p /opt/aws/bin                                                                 \n",

           "# Get the Cfn-Bootstrap                                                                    \n",
           "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz  \n",
           "sudo python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz \n",

           "# Start cfn-init                                                                           \n",
           "/opt/aws/bin/cfn-init -v --resource CaloriAppServerInstance", " --stack ", { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" },
           " || error_exit 'Failed to run cfn-init'\n",
           
           "# All done so signal success                                                               \n",
           "/opt/aws/bin/cfn-signal -e $? –resource CaloriAppServerInstance", " --stack ", { "Ref": "AWS::StackName" }, " --region ", { "Ref": "AWS::Region" },"\n"
        ]]}}
      }
    },

    "CaloriAppWebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition": "CreateS3Database",
      "DeletionPolicy": "Retain",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 and SSH access",
        "GroupName" : "CaloriAppWebServerSecurityGroup",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80",   "ToPort" : "80",   "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22",   "ToPort" : "22",   "CidrIp" : { "Ref" : "P07SSHLocation"}}
        ]
      }
    },

    "CaloriAppDBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Condition": "CreateS3Database",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DBName"            : { "Ref" : "P13DatabaseName" },
        "Engine"            : "postgres",
        "EngineVersion"     : "12.6",
        "DeletionProtection": "true",
        "MasterUsername"    : { "Ref" : "P14DatabaseUser" },
        "DBInstanceClass"   : { "Ref" : "P16DatabaseClass" },
        "DBSecurityGroups"  : [ { "Ref" : "CaloriAppDBSecurityGroup" } ],
        "AllocatedStorage"  : { "Ref" : "P17DatabaseAllocatedStorage" },
        "MasterUserPassword": { "Ref" : "P15DatabasePass" }
      }
    },
   
    "CaloriAppDBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Condition": "CreateS3Database",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DBSecurityGroupIngress": { "EC2SecurityGroupName": { "Ref": "CaloriAppWebServerSecurityGroup" } },
        "GroupDescription"      : "Frontend Access"
      }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Database",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": { "Ref": "P12CaloriAppS3Bucket" }
      }
    },
  
    "CaloriAppGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": {"Fn::Join": ["", ["CaloriAppGroup-", {"Ref": "AWS::Region"}]]}
      }
    },
  
    "CaloriAppUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
          "UserName": { "Ref": "P10S3UserName" },
          "Groups": [ { "Ref": "CaloriAppGroup" } ]
      }
    },

    "CaloriAppCloudWatchLogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {"Fn::Join": ["", ["CaloriAppCloudWatchLogRole-", {"Ref": "AWS::Region"}]]},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "CaloriAppCloudWatchLogRole",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:Create*",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],     
              "Resource": [ "arn:aws:logs:*:*:*" ]
            }]
          }
        }]
      }
    },

    "CaloriAppEc2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "CaloriAppCloudWatchLogRole" }]
      }
    },

    "CaloriAppWebServerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7,
        "LogGroupName": "CaloriAppWebServerLogGroup"
      }
    },
  
    "CaloriAppPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CaloriAppPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:ListBucket" ],
              "Resource": [ 
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "P12CaloriAppS3Bucket" } ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": [ 
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "P12CaloriAppS3Bucket" }, "/*" ] ] }
              ]
            }
          ]
        },
        "Roles": [{ "Ref": "CaloriAppCloudWatchLogRole" }],
        "Groups": [ { "Ref": "CaloriAppGroup" } ]
      }
    },

    "BytesTransferredMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref": "CaloriAppWebServerLogGroup" },
        "FilterPattern": "[ip, identity, user_id, timestamp, request, status_code, size, ...]",
        "MetricTransformations": [{
          "MetricValue": "$size",
          "MetricNamespace": "test/BytesTransferred",
          "MetricName": "testBytesTransferred"
        }]
      }
    },

    "BandwidthAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "The average volume of traffic is greater 3500 KB over 10 minutes",
        "MetricName": "testBytesTransferred",
        "Namespace": "test/BytesTransferred",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "3500",
        "AlarmActions": [ { "Ref": "AlarmNotificationTopic" } ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "AlarmNotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": { "Ref": "P01OperatorEmail" },
          "Protocol": "email"
        }]
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Description" : "URL for newly created Elixir Server stack",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "CaloriAppServerInstance", "PublicDnsName" ]}]] }
    },
    "DbConnectionString": {
      "Description" : "DATABASE_URL for github secrets in production server",
      "Condition": "CreateS3Database",
      "Value" : { "Fn::Join": [ "", [ "postgresql://postgres:postgres@",
                                      { "Fn::GetAtt": [ "CaloriAppDBInstance", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "CaloriAppDBInstance", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "P13DatabaseName" }]]}
    },
    "BucketString": {
      "Description" : "AWS_S3_BUCKET for github secrets in production server",
      "Condition": "CreateS3Database",
      "Value" : { "Ref": "P12CaloriAppS3Bucket" }
    },
    "OperatorEmailString": {
      "Description" : "Registered operator email to receive alarms",
      "Value" : { "Ref": "P01OperatorEmail" }
    }
  }
}

